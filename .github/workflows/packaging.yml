name: Package and publish the chart
on:
  pull_request_target:
    types: [closed]
  workflow_dispatch:
    inputs:
      manual-package-invocation:
        description: 'Package (y/n)?'
        required: true
        default: 'y'
      version-bump:
        description: 'Version bump: major, minor, patch'
        required: true
      branch-name:
        description: 'Branch name to package'
        required: true
jobs:
  package-from-pr:
    if: github.event.pull_request.merged == true
    name: Package and push from PR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
           persist-credentials: false
      - uses: cloudve/helm-ci@master
        with:
          chart-name: galaxy
          charts-repo: cloudve/helm-charts
          github-token: ${{ secrets.CHARTS_TOKEN }}
          charts-token: ${{ secrets.CHARTS_TOKEN }}
          github-labels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}
          git-branch: ${{ github.event.pull_request.base.ref }}
  package-from-manual:
    if: github.event.inputs.manual-package-invocation == 'y'
    name: Package and push manual invocation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
           persist-credentials: false
      - uses: cloudve/helm-ci@master
        with:
          chart-name: galaxy
          charts-repo: cloudve/helm-charts
          github-token: ${{ secrets.CHARTS_TOKEN }}
          charts-token: ${{ secrets.CHARTS_TOKEN }}
          github-labels: ${{ github.event.inputs.version-bump }}
          git-branch: ${{ github.event.inputs.branch-name }}
  tag-and-release:
    needs: [ package-from-pr, package-from-manual ]
    name: Create a tag and GitHub release for this version.
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    if: |
      always() 
      && contains(needs.*.result, 'success')
      && !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - name: Tag and release
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          version=v$(cat galaxy/Chart.yaml | grep ^version: | awk '{print $2}')
          git tag -a $version -m "Automatic release of $version"
          git push origin $version
          gh release create $version --generate-notes --latest
