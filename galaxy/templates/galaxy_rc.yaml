apiVersion: v1
kind: ReplicationController
metadata:
    name: {{.Values.galaxy_metadata_name}} 
spec:
  replicas: 1
  template:
    metadata:
      labels:
         app: {{.Values.galaxy_label_app}}
{{ if and .Values.galaxy_backend_postgres .Values.legacy_pre_k8s_16}}
      annotations:
        pod.beta.kubernetes.io/init-containers: |-
          [
            {
              "name": "postgres-listener",
              "image": "alpine",
              "imagePullPolicy": "IfNotPresent",
              "command": [
                "sh", "-c",
                "for i in $(seq 1 200); do nc -z -w3 postgresql-for-galaxy 5432 && exit 0 || sleep 3; done; exit 1"
              ]
            }
          ]
{{ end }}
    spec:
      {{ if and .Values.galaxy_backend_postgres (not .Values.legacy.pre_k8s_16) }}
      initContainers:
        - name: postgres-listener-v2
          image: alpine
          imagePullPolicy: IfNotPresent
          command: [ "sh", "-c", "for i in $(seq 1 200); do nc -z -w3 postgresql-for-galaxy 5432 && exit 0 || sleep 3; done; exit 1"]
      {{ end }}
      containers:
      - name: galaxy-k8s
        image: {{.Values.galaxy_image_registry}}{{.Values.galaxy_image}}{{.Values.galaxy_image_tag}}
        imagePullPolicy: {{.Values.galaxy_pull_policy}}
        env:
            - name: "GALAXY_CONFIG_DATABASE_AUTO_MIGRATE"	
              value: "{{.Values.galaxy.config.auto_migrate}}"
            - name: "GALAXY_TOOLS_PULL_POLICY"
              value: {{.Values.galaxy_pull_policy}} 
{{ if .Values.galaxy_backend_postgres }}
            - name: "GALAXY_SEC_DB_ENGINE"
              value: "postgresql"
            - name: "GALAXY_SEC_DB_USER"
              valueFrom:
                configMapKeyRef:
                      name: db-connection
                      key: db.user
            - name: "GALAXY_SEC_DB_PASS"
              valueFrom:
                secretKeyRef:
                      name: galaxy-postgres-secret
                      key: password
            - name: "GALAXY_SEC_DB_HOST"
              value: "postgresql-for-galaxy"
            - name: "GALAXY_SEC_DB_NAME"
              valueFrom:
                configMapKeyRef:
                      name: db-connection
                      key: db.name
            - name: "GALAXY_CONFIG_DATABASE_CONNECTION"
              value: "$GALAXY_SEC_DB_ENGINE://$GALAXY_SEC_DB_HOST/$GALAXY_SEC_DB_NAME?client_encoding=utf8"
{{ end }}
{{ if .Values.galaxy_tools_dest }}
            - name: "TOOLS_DEST_PVC"
              value: "{{.Values.galaxy_tools_dest}}"
            - name: "GALAXY_CONFIG_TOOL_PATH"
              value: "{{.Values.galaxy_tools_dest}}"   
{{ end }}
{{ if .Values.k8s_supp_groups }}
            - name: "SUPP_GROUPS"
              value: "{{.Values.k8s_supp_groups}}"
{{ end }}
{{ if .Values.k8s_fs_group }}
            - name: "FS_GROUP"
              value: "{{.Values.k8s_fs_group}}"
{{ end }}
{{ if and .Values.galaxy_admin_email (and .Values.galaxy_admin_password .Values.galaxy_api_key) }}
            - name: "GALAXY_ADMIN_EMAIL"
              valueFrom:
                configMapKeyRef:
                      name: galaxy-admin-user
                      key: email
            - name: "GALAXY_CONFIG_ADMIN_USERS"
              valueFrom:
                configMapKeyRef:
                      name: galaxy-admin-user
                      key: email
            - name: "GALAXY_ADMIN_USER"
              valueFrom:
                configMapKeyRef:
                      name: galaxy-admin-user
                      key: user
            - name: "GALAXY_ADMIN_PASSWORD"
              valueFrom:
                secretKeyRef:
                      name: galaxy-admin-secret
                      key: password
            - name: "GALAXY_API_KEY"
              valueFrom:
                secretKeyRef:
                      name: galaxy-admin-secret
                      key: api-key
            - name: "GALAXY_CONFIG_MASTER_API_KEY"
              valueFrom:
                secretKeyRef:
                      name: galaxy-admin-secret
                      key: api-key
            - name: "GALAXY_CONFIG_ALLOW_USER_DELETION"
              value: "True"
{{ end }}
{{ if .Values.log_file_to_track }}
            - name: "GALAXY_PROCESS_LOG_FILE"
              value: "{{.Values.log_file_to_track}}"
{{ end }}
{{ if and .Values.smtp_server (and .Values.smtp_username .Values.smtp_password) }}
            - name: "GALAXY_SMTP_SERVER"
              value: "{{.Values.smtp_server}}"
            - name: "GALAXY_CONFIG_SMTP_SERVER"
              value: "{{.Values.smtp_server}}"
            - name: "GALAXY_SMTP_USERNAME"
              value: "{{.Values.smtp_username}}"
            - name: "GALAXY_CONFIG_SMTP_USERNAME"
              value: "{{.Values.smtp_username}}"
            - name: "GALAXY_SMTP_PASSWORD"
              value: "{{.Values.smtp_password}}"
            - name: "GALAXY_CONFIG_SMTP_PASSWORD"
              value: "{{.Values.smtp_password}}"
            - name: "GALAXY_EMAIL_FROM"
              value: "{{.Values.email_from}}"
            - name: "GALAXY_CONFIG_EMAIL_FROM"
              value: "{{.Values.email_from}}"
            - name: "GALAXY_URL"
              value: "{{.Values.instance_resource_url}}"
            - name: "GALAXY_CONFIG_URL"
              value: "{{.Values.instance_resource_url}}"
            - name: "GALAXY_SMTP_SSL"
              value: "{{.Values.smtp_ssl}}" 
            - name: "GALAXY_CONFIG_SMTP_SSL"
              value: "{{.Values.smtp_ssl}}"
{{ end }}
        command: ["/bin/bash","-c",
          "./ansible/run_galaxy_config.sh && ./run.sh --daemon && tail -f {{.Values.log_file_to_track}}"]
        lifecycle:
          preStop:
            exec:
               command:
                   - "./run.sh"
                   - "--stop" 
        ports:
          - containerPort: {{.Values.galaxy_internal_port}}
        volumeMounts:
          - mountPath: "/opt/galaxy_data"
            name: galaxy-pvc
{{ if .Values.development_folder }}
          - mountPath: "/galaxy/config/galaxy.ini.injected"
            name: galaxy-ini 
          - mountPath: "/galaxy/config/job_conf.xml"
            name: galaxy-job-conf 
          - mountPath: "/galaxy/config/tool_conf.xml"
            name: galaxy-tool-conf
          - mountPath: "/galaxy/tools/phenomenal"
            name: phenomenal-tools     
{{ if .Values.tool2container_mapping_file }}
          - mountPath: /galaxy/config/{{ .Values.tool2container_mapping_file }}
            name: phenomenal-tools2container-mapping
{{ end }}
{{ end }}
{{ if or .Values.k8s_supp_groups .Values.k8s_fs_group }}
      securityContext:
{{ if .Values.k8s_supp_groups }}
        supplementalGroups: [{{.Values.k8s_supp_groups}}]
{{ end }}
{{ if .Values.k8s_fs_group }}
        fsGroup: {{.Values.k8s_fs_group}}
{{ end }}
{{ end }}
      volumes:
        - name: galaxy-pvc
          persistentVolumeClaim:
              claimName: {{.Values.galaxy_pvc}}
{{ if .Values.development_folder }}
        - name: galaxy-ini
          hostPath:
            path: {{ .Values.development_folder }}/config/galaxy.ini
        - name: galaxy-job-conf
          hostPath:
            path: {{ .Values.development_folder }}/config/job_conf.xml
        - name: galaxy-tool-conf
          hostPath:
            path: {{ .Values.development_folder }}/config/tool_conf.xml
        - name: phenomenal-tools
          hostPath:
            path: {{ .Values.development_folder }}/tools/phenomenal
{{ if .Values.tool2container_mapping_file }}
        - name: phenomenal-tools2container-mapping
          hostPath:
            path: "{{ .Values.development_folder }}/config/{{ .Values.tool2container_mapping_file }}"
{{ end }}
{{ end }}
